export interface EnumerableMethods {
  all(...args: any[]): any;
  any(...args: any[]): any;
  assert(...args: any[]): any;
  batch(...args: any[]): any;
  cast(...args: any[]): any;
  concat(...args: any[]): any;
  defaultIfEmpty(...args: any[]): any;
  difference(...args: any[]): any;
  differenceMany(...args: any[]): any;
  distinct(...args: any[]): any;
  includes(...args: any[]): any;
  drain(...args: any[]): any;
  filter(...args: any[]): any;
  filterNullOrUndefined(...args: any[]): any;
  first(...args: any[]): any;
  firstOrDefault(...args: any[]): any;
  forceCast(...args: any[]): any;
  forEach(...args: any[]): any;
  group(...args: any[]): any;
  groupSingle(...args: any[]): any;
  groupToMap(...args: any[]): any;
  groupToSingleMap(...args: any[]): any;
  tap(...args: any[]): any;
  last(...args: any[]): any;
  lastOrDefault(...args: any[]): any;
  map(...args: any[]): any;
  mapMany(...args: any[]): any;
  materialize(...args: any[]): any;
  metadata(...args: any[]): any;
  pairwise(...args: any[]): any;
  reduce(...args: any[]): any;
  single(...args: any[]): any;
  singleOrDefault(...args: any[]): any;
  skip(...args: any[]): any;
  sort(...args: any[]): any;
  sortToArray(...args: any[]): any;
  take(...args: any[]): any;
  takeUntil(...args: any[]): any;
  takeWhile(...args: any[]): any;
  toArray(...args: any[]): any;
  toAsync(...args: any[]): any;
  toIterator(...args: any[]): any;
  toSet(...args: any[]): any;
  toSync(...args: any[]): any;
  while(...args: any[]): any;
}
